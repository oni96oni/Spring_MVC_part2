타임리프 - 기본 기능
    프로젝트 생성

    타임리프 소개
        SSR, 네츄럴 템플릿, 스프링 통합 지원

        SSR :  CSR은 자스이용
        네츄럴 템플릿 : 순수 HTML을 최대한 유지, 웹 브라우저에서 파일 직접열어도 내용 확인가능, JSP는 JSP소스코드 때문에 깨진다.
        스프링 통합 지원 : 스프링과 통합되서 편리한 기능 지원

    텍스트 - text, utext
        th:text="${data}" 를 넣어주면 된다.

        HTML테그의 속성이 아니라 HTML콘텐츠 영역 안에서 직접 데이터를 출력할때는 | | 로 감싸준다.

        안에서 직접 출력한다는것은 태그안에 감싸져서 출력되는것이 아니라 바로 출력되는것!(html소스상으로)

        태그를 그대로 보여주기 위해서는 &lt;, &gt; 를 붙여주면 된다. 이게 < > 역할을 해주는것

        태그를 태그로 쓰고싶으면 utext 사용! <b>이런거 쓰면 글씨 찐하게 나온다.

        HTML 엔티티 관련해서는 추가적학습 필요!!!

        이스케이프 기능을 사용하지 않으려면 th:text -> th:utext 사용

        실제 서비스 개발할때는 escape를 기본으로하고 필요할 때만 unescape를 사용할것

    변수 - SpringEL
        타임리프에서 변수를 사용할때 ${...}

        이 변수 표현식에서는 스프링 EL 사용가능

        자바 프로퍼티도 적용이 되어서 ${user.username} 하면 user.getUserName이 되어서 값을 가져와준다.

    기본 객체들
        ${#request, response,session,servletContext,locale} 등 사용 가능

        ${#request.getParameter("id")} 이런식으로 가져올 수 있다. 그런데 이건 너무 불편하다!

        그래서 데이터에 접근하기 쉽게 편의객체를 만들어놓음 3가지!
            1. HTTP 요청 파라미터 접근 : param, ${param.paramData}
            2. HTTP 세션 접근 : session, ${session.sessionData}
            3. 스프링 빈 접근 : @, ${@helloBean.hello('Spring!')}

        편의객체 기능을 이용하면 자주쓰는 파라미터는 컨트롤러를 안거치고 바로 html상에서 값을 얻을 수 있다. param

    유틸리티 객체와 날짜
        문자, 숫자, 날짜, URI 등을 편리하게 다루게해주는 유틸리티 객체들 제공

    URL 링크
        경로 설정에 관한 방법!
        url 만들기
            1. 단순한 URL
            2. 쿼리 파라미터
            3. 경로 변수
            4. 경로 변수 + 쿼리 파라미터

            상대, 절대 경로 기준도 존재
    리터럴
        문자, 숫자, 불린, null 리터럴등이 있다.
        항상 작은 따옴표로 감싸야 한다!
        다만 공백이 없다면 작은 따옴표 생략가능

    연산
        자바와 크게 다르지 않다 다만 HTML 엔티티를 사용하는 부분만 주의하자

        엘비스 연산자 데이터가 없을때 사용 조건식을 좀더 편하게 쓰기위함

    속성 값 설정
        HTML태그에 th:* 속성을 지정하는 방식으로 동작! 이렇게하면 기존 기존 속성을 대체한다. 기존 속성이 없으면 새로 만든다.

        classappend를 통해서 class에 속성을 추가해줄 수 있다.

        html 태그 checkbox에서 checked라는게 있으면 체크가 된채로 나온다.
        그래서 타임리프 th:checked는 값이 false면 checked옵션을 없애버려서 체크가 안되게 한다.

    반복
        오른쪽의 컬렉션을 왼쪽의 변수에 담아서 반복을 한다!
        배열, Iterable, Enumeration을 구현했으면 다 올 수있다.

        반복 상태 유지 기능 반복의 두번째 파라미터를 ㅅ ㅓㄹ정해서 반복의 상태를 확인 가능

    조건부 평가
        타임리프의 조건식 if, unless(if의 반대)

        조건을 만족하지 못하면 태그자체가 출력이 되지 않는다.

    주석
        html 주석, 타임리프 주석
        html 주석 : <!-- -->
        타임리프 파서 주석 : <!--/*  */-->
        타임리프 프로토타입 주석 : <!--/*/ /*/--> 타임리프로 랜더링됬을때만 보이는 주석

        타임리프 파서 주석은 아예 없어져서 페이지 소스보기에서 안나온다. html코드여도 안나온다!
        타임리프 프로토 타입 주석은 잘안쓴다. 파일 그대로 열었을때는 안나오지만 타임리프로 랜더링 됬을때는 출력되게

    블록
        html태그가 아닌 타임리프의 유일한 자체태그
        보통 타임리프는 속성으로 동작한다.

        th:block th:each와 같이사용, 렌더링시 th:block 제거된다.

        여기서는 div를 2개씩 출력하고 싶을때 사용했다.

        안쓰는게 좋다!

    자바스크립트 인라인
        타임리프에서 자바스크립트를 편리하게 사용할수 있게해주는기능
        <script th:inline="javascript">
        인라인 기능때문에 타임리프에서도 자바스크립트 내추럴 템플릿이 가능하다.

        객체를 json으로 자동으로 변환해준다.

        가져다 쓰기 쉽게.

    탬플릿 조각
        footer 같은것을 만들어놓고 다른 html에서 불러오는것 jsp에서 include랑 비슷한것같다.

        insert는 기존의 태그를 유지한채로 그 안에넣는것
        replace는 기존의 태그 자체를 교체해버리는것

        단순 표현식은 복잡해지면 어차피 못쓰게된다.

    탬플릿 레이아웃1
        베이스는 거대한 레이아웃
        그것을 기준으로 더 확장하는 개념
        필요한 부분만 내가 추가적으로 만들어 줄 수 있다.

        레이아웃에 필요한 코드조각을 전달해서 완성하는것.

    템플릿 레이아웃2

