스프링 타입 컨버터
    스프링 타입 컨버터 소개
        타입을 변환해야하는 경우!

        HTTP 쿼리 스트링으로 전달하는것은 문자로 넘어오는것이다! 이 문자를 내가 사용하려는 타입에 맞게 변경이 필요할때
        @RequestParam, @ModelAttribute, @PathVariable 등등을 사용한다.

        컨버터 인터페이스를 구현하면 위의 어노테이션을 사용할때 타입 변환이 가능하다.

    타입 컨버터 - Converter
        직접 컨버터를 사용하면 직접 컨버팅하는것과 차이가 없다

        타입 컨버터를 등록하고 관리하면서 편리하게 변환 기능을 제공하는 역할을 하는 무언가가 필요하다.
        -> ConversionService
        묶어서 사용한다???

        다양한 방식의 타입 컨버터를 제공한다.
        -> Converter, ConverterFactory, GenericConverter 등등

    컨버전 서비스 - ConversionService
        개별 컨버터를 모아두고 그것들을 묶어서 사용할 수 있는 기능 제공 - > ConversionService

        DefaultConversionService는 ConversionService 인터페이스를 구현했고, 추가로 컨버터를 등록 가능하다(예를 들어 우리가 만든것도)

        사용하는 입장에서는 타입 컨버터를 전혀 몰라도 된다. 등록할때만 잘 알면된다.

        스프링의 많은 기능들을 살펴보면 사용하는 쪽과 등록하는 쪽이 분리되어 있다 -> 관심사의 분리

    스프링에 Converter 적용하기
        실제에서 적용되는 모습 살펴보기

        스프링에는 사실 수많은 컨버터가 이미 기본적으로 들어가 있어서 추가를 안해도 왠만한거는 알아서 변환해준다.
        에드포메터에 아무것도 안넣고 실행을 해도 컨버팅(바인딩)이 잘 되는 이유가 그것

        대신 추가를 하면 기존의것보다 우리가 추가한것이 우선적용된다.

    뷰 템플릿에 컨버터 적용하기
        객체를 호출해서 프린트찍으면 toString()호출한것과 같은결과가 나오는데 타임리프에서 $${{}}로 감싸면
        그안의 값이 컨버팅이 되서 출력된다.

        타임리프의 th:field는 컨버전 서비스도 함께 적용된다.

    포맷터 - Formatter
        1000같은 것에 1,000 같이 , 를 넣어주는 행위 혹은 날짜 구분 등의 포맷터를 넣어주는것이 포매터
        Converter의 특별 버전

    포맷터를 지원하는 컨버전 서비스
        포맷터는 특별한 컨버터, 객체 -> 문자, 문자 -> 객체 로 변환하는

    포멧터 적용하기
