예외 처리와 오류 페이지
    프로젝트 생성

    서블릿 예외 처리 - 시작
        스프링이 아닌 순수 서블릿 컨테이너는 예외를 어떻게 처리하는가?

        서블릿은
            1. Exception
            2. response.sendError(HTTP 상태 코드, 오류 메시지)

        같은 방식으로 서블릿은 예외를 처리한다.

        WAS에게 문제가있다는걸 알려주는 1번째 방법

        Exception 기본적인 매커니즘
        자바의 메인 메서드를 직접 실행하는 경우 main 이라는 이름의 쓰레드가 실행된다.
        main 콜스택에서 작업을 진행하던중 한 메서드에서 에러가 발생하면
        에러를 발생시킨 메서드를 호출한 메서드로 에러가 전달되고 이 과정이 반복되는데
        이 예외를 못잡고 처음 실행한 main()를 넘어서 예외가 던져지면 예외정보를 남기고 해당 쓰레드는 종료된다.

        ★웹 애플리케이션은 사용자 요청별로 별도의 쓰레드가 할당된다. 이게 서블릿 컨테이너 안에서 실행된다.

        WAS는 에러를 받으면 서버에서 처리할 수 없는 에러다 생각하고 500번대 에러를 띄운다.


        WAS에게 문제가있다는걸 알려주는 2번째 방법

        response.sendError(HTTP 상태 코드, 오류 메시지) 호출한다고 당장 예외가 발생하는 것은 아니다.
        하지만 서블릿 컨테이너에게 오류가 발생했다는 점을 전달할 수 있다.

        WAS(sendError 호출 기록 확인) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러(response.sendError)
        서블릿 컨테이너는 고객에게 응답 전에 response에 sendError()가 호출되었는지 확인한다.
        호출이 되었다면 설정한 오류코드에 맞추어 기본 오류 페이지를 보여준다.

    서블릿 예외 처리 - 오류 화면 제공
        WAS까지 갔다가 다시 에러페이지의 경로를 호출한다.(컨트롤러 호출)

    서블릿 예외 처리 - 오류 페이지 작동 원리

        예외가 발생해서 WAS까지 전파된다.
        WAS는 오류 페이지 경로를 찾아내서 내부에서 오류 페이지를 호출한다. 이때 오류 페이지 경로로
        필터, 서블릿, 인터셉터, 컨트롤러가 모두 호출된다.

        WAS는 단순히 에러페이지를 재요청 하는것이 아니라 request에 오류 정보를 추가해서 넘겨준다!

        에러에 대한 정보도 request에 담겨서 넘어가기 때문에 컨트롤러에서는
        request에 담긴 오류 정보를 꺼내서 사용할 수 있다.(우리가 확인도 가능)

    서블릿 예외 처리 - 필터
        서블릿 예외 처리를 할때 어떻게 필터랑 맞물려서 작동하는지 알아보자

        필터,서블릿,인터셉터도 모두 다시 호출된다 -> 한번 더 호출되는것은 매우 비효율적이다.

        클라이언트로부터 발생한 정상요청인지 아니면 오류 페이지를 출력하기 위한 내부 요청인지 구분할 수 있어야한다.

        서블릿은 이런 상황을 위해서 dispatcherTypes를 제공한다!

        dispatcherTypes는 요청이 어떤 방식으로 들어왔는지를 구분해주는 역할을 한다.

        dispatcherTypes는 다음과 같은 3가지 타입이 있다.

        REQUEST : 클라이언트에서 정상적인 요청
        FORWARD : 내부에서 요청을 전달할 때
        ERROR : 오류 페이지를 호출할 때

        DispatcherType은 REQUEST가 기본이니까 문제가 안생기구나 라고 이해

    서블릿 예외 처리 - 인터셉터
        흐름 정리 중요하다.
        에러가 발생하면 컨트롤러까지 갔다가 다시 인터셉터 타고 WAS까지 온다.

        그뒤 WAS에서 다시 VIEW까지 간다.
        이때 dispatchType=ERROR 면 필터와 인터셉터는 다시 호출이 안되게한다!

    스프링 부트 - 오류 페이지 1
        서블릿이 제공하는 기능을 넘어서 부트가 제공하는 기능은 ???

        WebServerCustomizer 만들고 처리 컨트롤러 만들고.. 등등의 복잡한 과정을 부트는 자동으로 제공한다!

        스프링 부트는 기본적으로 제공하는 오류 페이지를 사용할 수 있다.
        ErrorPage를 자동으로 등록 -> /error 가 기본 오류 페이지 설정

        스프링 부트가 자동 등록한 BasicErrorController
        이렇게 컨트롤러가 만들어져 있기때문에 사용하기만 하면 된다!
        룰과 우선순위에 따라서 오류파일만 만들어서 등록하면된다.

        뷰 선택 우선순위
        1. 뷰 탬플릿 ( 더 자세한것이 우선순위가 더 높다 500이 5xx보다 우선순위가 높다 )
        2. 정적 리소스(static, public)
        3. 적용 대상이 없을 때 뷰이름(error)

    스프링 부트 - 오류 페이지 2
        오류 관련 내부정보는 고객에게 노출 x !

    정리
        서블릿 예외처리 스프링은 그 위에서 어떻게 처리하는지!
        Exception과 response.sendError()의 차이
        에러를 터트리면 톰캣이 오류화면을 보여준다.
        response.sendError()는 톰캣이 오류를 인지해서 오류화면을 띄워준다.

        DispatcherType으로 중복호출을 막는다! 필터와 인터셉터의

        basicerrorcontroller는 model에 에러에 관련된 정보를 담아서 보내기때문에 우리가 확인이 가능하다.

        오류는 서버에 로그로 남겨서 로그로 확인해야 한다!!

        ★★부트가 기본으로 제공하는 오류페이지를 활용하면 오류페이지와 관련된 대부분의 문제는 손쉽게 해결할 수 있다.

        하지만! 페이지는 에러가 단순하다 몇가지 만들어두면 해결이 되는데
        복잡한 문제는 api에러!!

        문제가 생겼을때 어떤식으로 api를 전달할지 약속을 해놓는다. 이때 json을 어떤 형식으로 보내고 정의하는것들이 훨씬 복잡하다.

        api에러는 어떻게 처리해야할까?