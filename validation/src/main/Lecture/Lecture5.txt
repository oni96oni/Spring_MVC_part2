검증 2 - Bean Validation
    Bean Validation  - 소개
        검증기능을 매번 코드로 작성하는 것은 번거롭다 -> 애너테이션을 활용해보자!!

        @NotBlank : 공백x, empty여도 안된다.
        @Range : 범위 (min : 최소, max : 최대 )
        @NotNull : empty안된다.

        Bean Validation은 특정한 구현체가 아니라 기술표준이다.
        즉, 검증 애노테이션과 여러 인터페이스의 모음이다.

        많은 애노테이션을 읽고 작동시킬 구현체가 필요

    Bean Validation - 시작
        빈 검증기를 수동으로 구현

    Bean Validation - 프로젝트 준비 V3

    Bean Validation - 스프링 적용
        검증기를 없앴는데도 검증이 되는 이유는??
        Item에 iv들에다가 붙여놓은 애너테이션으로 검증을 한다!

        스프링 부트에 validation 라이브러리를 넣으면 자동으로 Bean Validator를 인지하고 스프링에 통합

        애노테이션을 보고 빈을 검증해주는 검증기(LocalValidatorFactoryBean)을 글로벌 Validator로 등록한다.

        대신 @Validated를 검증하고자하는 매개변수에 애너테이션으로 붙여주어야한다! 없으면 검증 x

        @Valid, @Validated 차이
            @Valid : JSR-303에 정의된 애노테이션만 사용가능
            @Validated : 스프링이 제공하는 추가 애노테이션을 사용가능
        둘다 사용 ok

        검증 순서
            1. @ModelAttribute 각각의 필드에 타입 변환 시도
                1-1. 성공하면 다음으로
                1-2. 실패하면 typeMismatch로 FieldError 추가
            2. Validator 적용

            바인딩에 성공한 필드만 Bean Validation을 적용한다.
                즉 일단 타입이 맞지 않으면 Bean Validation을 적용하지 않는다.
                타입부터 안맞는데 검증을 하면 의미가 없다.

    Bean Validation - 에러 코드
        오류코드가 애노테이션 이름으로 등록된다 typeMismatch와 굉장히 유사

        1. 생성된 메시지 코드 순서대로 messageSource에서 메시지를 찾는다.
        2. 애너테이션에 붙어있는 message 속성사용
        3. 라이브러리가 제공하는 기본값 사용

    Bean Validation - 오브젝트 오류
        ObjectError란?

        필드에러는 iv등에 애너테이션 붙여서 해결
        오브젝트에러는 @ScriptAssert를 클래스에 붙여준다. -> 권장 x , 기능이 약하다

        자바 코드를 이용하는것이 좋다.

        사실 Bean Validation 별로 배울게 없다 애노테이션 붙여주는것이 전부다.

    Bean Validation - 수정에 적용

    Bean Validation - 한계
        한계점과 실무에서는 그 한계를 어떻게 돌파?

        페이지별로 검증 조건이 다르면 작동이 원할하지 않다.

        BeanValidation을 구분해서 등록하고싶다.

    Bean Validation - groups
        등록할때와 수정할때 조건이 충돌해서 문제가 발생 어떻게 해결해야 할까?

        HTTP 요청은 언제든지 악의적으로 변경 될 수 있으므로 서버검증 필수!

        조건을 다르게 등록하여야 한다.

        1. BeanValidation에 groups 기능을 사용
        2. Item을 직접 사용하지 않고, ItemSaveForm, ItemUpdateForm 폼 전송을 위한 별도의 모델 객체를 만들어서 사용한다.

        groups기능을 이용하려면 Validated를 사용해야 한다. Valid는 groups가 없다.

        그런데 groups 기능은 실제로 잘 사용 x 우선 복잡하고, 실무에서는 등록용 폼 객체와 수정용 폼 객체를 분리해서 사용한다.

    Form 전송 객체 분리 - 프로젝트 준비 V4
        ★★★ 앞의 과정은 지금부터 배울 내용을 더욱 깊게 이해하기 위한것

    Form 전송 객체 분리 - 소개
        회원등록할때 넘기는 데이터가 회원과 관련된 데이터만 전달받는 것이 아니라 추가적인 데이터가 정말많다.
        그래서 복잡한 폼의 데이터를 컨트롤러까지 전달할 별도의 객체를 만들어서 전달한다.

        분기문이 많아지면 분리해야할 신호!!

    Form 전송 객체 분리 - 개발
        조건마다 폼을 만들어서 객체를 전달한다.

        폼객체를 사용하면 중간에 변환하는 과정이 추가된다. ( item객체를 만들고 setter 사용하는 과정 )

    Bean Validation - HTTP 메시지 컨버터

