검증 2 - Bean Validation
    Bean Validation  - 소개
        검증기능을 매번 코드로 작성하는 것은 번거롭다 -> 애너테이션을 활용해보자!!

        @NotBlank : 공백x, empty여도 안된다.
        @Range : 범위 (min : 최소, max : 최대 )
        @NotNull : empty안된다.

        Bean Validation은 특정한 구현체가 아니라 기술표준이다.
        즉, 검증 애노테이션과 여러 인터페이스의 모음이다.

        많은 애노테이션을 읽고 작동시킬 구현체가 필요

    Bean Validation - 시작
        빈 검증기를 수동으로 구현

    Bean Validation - 프로젝트 준비 V3

    Bean Validation - 스프링 적용
        검증기를 없앴는데도 검증이 되는 이유는??
        Item에 iv들에다가 붙여놓은 애너테이션으로 검증을 한다!

        스프링 부트에 validation 라이브러리를 넣으면 자동으로 Bean Validator를 인지하고 스프링에 통합

        애노테이션을 보고 빈을 검증해주는 검증기(LocalValidatorFactoryBean)을 글로벌 Validator로 등록한다.

        대신 @Validated를 검증하고자하는 매개변수에 애너테이션으로 붙여주어야한다! 없으면 검증 x

        @Valid, @Validated 차이
            @Valid : JSR-303에 정의된 애노테이션만 사용가능
            @Validated : 스프링이 제공하는 추가 애노테이션을 사용가능
        둘다 사용 ok

        검증 순서
            1. @ModelAttribute 각각의 필드에 타입 변환 시도
                1-1. 성공하면 다음으로
                1-2. 실패하면 typeMismatch로 FieldError 추가
            2. Validator 적용

            바인딩에 성공한 필드만 Bean Validation을 적용한다.
                즉 일단 타입이 맞지 않으면 Bean Validation을 적용하지 않는다.
                타입부터 안맞는데 검증을 하면 의미가 없다.

    Bean Validation - 에러 코드
        오류코드가 애노테이션 이름으로 등록된다 typeMismatch와 굉장히 유사

        1. 생성된 메시지 코드 순서대로 messageSource에서 메시지를 찾는다.
        2. 애너테이션에 붙어있는 message 속성사용
        3. 라이브러리가 제공하는 기본값 사용

    Bean Validation - 오브젝트 오류